================================ 73 ===============================
public void setZeroes(int[][] matrix) {
        // without create new matrix
        int n = matrix.length;
        int m = matrix[0].length;
        Set<List<Integer>> set = new HashSet<>();
        // in which (i,j) have 0 store this i, j
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix[i][j] == 0) {
                    List<Integer> temp = new ArrayList<>();
                    temp.add(i);
                    temp.add(j);
                    set.add(temp);
                }
            }
        }
        // loop run in all i,j that have in set
        for (List<Integer> d : set) {
            fillZero(matrix, d.get(0), d.get(1), n, m);
        }
    }

    public void fillZero(int[][] matrix, int row, int col, int n, int m) {
        for (int i = row; i >= 0; i--) {
            matrix[i][col] = 0;
        }
        for (int i = row; i < n; i++) {
            matrix[i][col] = 0;
        }
        for (int j = col; j >= 0; j--) {
            matrix[row][j] = 0;
        }
        for (int j = col; j < m; j++) {
            matrix[row][j] = 0;
        }
    }
======================================= 118 =================================
public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ans = new ArrayList<>();

        for (int i = 1; i <= numRows; i++) {
            List<Integer> temp = new ArrayList<>();
            for (int j = 1; j <= i; j++) {
                temp.add(generateValue(i, j));
            }
            ans.add(temp);
        }

        return ans;
    }

    public int generateValue(int r, int c) {
        r = r - 1;
        c = c - 1;
        int res = 1;

        for (int i = 0; i < c; i++) {
            res *= r - i;
            res /= i + 1;
        }
        return res;
    }
================================ 31 ============================
public void nextPermutation(int[] nums) {
        int n = nums.length;
        // find the small value from right
        int i = n - 2;
        for (; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                break;
            }
        }
        // if find so swap with the first greater value from this value
        if (i >= 0) {
            int j = n - 1;
            for (; j > i; j--) {
                if (nums[i] < nums[j]) {
                    break;
                }
            }
            // swap
            swap(nums, i, j);
        }
        // reverse array from i+1 to n-1
        reverse(nums, i + 1, n - 1);
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public void reverse(int[] nums, int i, int j) {
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }
================================== 48 ===========================
public void rotate(int[][] matrix) {
        // swap diagonal line right value
        int n = matrix.length;
        int m = matrix[0].length;

        for(int i=0; i < n; i++) {
           for(int j=i+1; j < m; j++) {
                swap1(matrix, i, j);
           }
        }
        // per row reverse
        for(int i=0; i < n; i++) {
            reverse(matrix, i);
        }
    }
    public void reverse(int[][] m, int row) {
        int p1 = 0, p2 = m.length-1;
        while(p1 < p2) {
            swap2(m, row, p1, p2);
            p1++;
            p2--;
        }
    }
    public void swap2(int[][] m, int row, int p1, int p2) {
        int temp = m[row][p1];
        m[row][p1] = m[row][p2];
        m[row][p2] = temp;
    }
    public void swap1(int[][] m, int row, int col) {
        int temp = m[row][col];
        m[row][col] = m[col][row];
        m[col][row] = temp;
    } 
================================================= 56 ==================================
public int[][] merge(int[][] intervals) {
        // sort based on 0th index [1, 4], [0, 4] for this example return false result
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        // store in an arrylist 
        ArrayList<int[]> list = new ArrayList<>();
        list.add(intervals[0]);

        for(int i=1; i < intervals.length; i++) {
            int m = list.size()-1;
            // this condition true means have a intervals
            if(list.get(m)[1] >= intervals[i][0]) {
                int max = Math.max(list.get(m)[1], intervals[i][1]);
                list.get(m)[1] = max;
            }   else {
                list.add(intervals[i]);
            }
        }

        int[][] ans = new int[list.size()][2];
        list.toArray(ans);
        return ans;
    }
=============================================== 287 ==================================
// not most optimal part solve using binary search
public int findDuplicate(int[] nums) {
        int low = 1, high = nums.length - 1;

        while (low < high) {
            int mid = low + (high - low) / 2;

            int cnt = 0;
            for (int val : nums) {
                if (val <= mid)
                    cnt++;
            }

            if (cnt > mid)
                high = mid;
            else
                low = mid + 1;
        }

        return low;
    }