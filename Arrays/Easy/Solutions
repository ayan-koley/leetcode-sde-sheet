============================== 53 ================================
public int maxSubArray(int[] nums) {

    int n = nums.length;
    int max = Integer.MIN_VALUE;
    int sum = 0;

    for(int i=0; i < n; i++) {
        sum += nums[i];
        max = Math.max(max, sum);
        if(sum < 0) {
            sum = 0;
        }
    }

    return max;
}
=============================== 121 =================================
public int maxProfit(int[] prices) {
        int n = prices.length;

        int buy = Integer.MAX_VALUE;
        int maxProfit = 0;

        for (int i = 0; i < n; i++) {
            if (buy < prices[i]) {

                int profit = prices[i] - buy;
                maxProfit = Math.max(maxProfit, profit);

            } else {
                buy = prices[i];
            }
        }
        return maxProfit;
    }
========================================= 169 =======================================
public int majorityElement(int[] nums) {
        int n = nums.length;

        return divide(nums, 0, n-1);
    }
    public int divide(int[] nums, int si, int ei) {
        if(si == ei) return nums[si];

        int mid = si + (ei - si) / 2;

        int left = divide(nums, si, mid);
        int right = divide(nums, mid+1, ei);

        int leftCount = count(nums, si, ei, left);
        int rightCount = count(nums, si, ei, right);

        return leftCount > rightCount ? left : right;
    }
    public int count(int[] nums, int si, int ei, int val) {
        int cnt = 0;
        for(int i=si; i <= ei; i++) {
            if(nums[i] == val) cnt++;
        }
        return cnt;
    } 



