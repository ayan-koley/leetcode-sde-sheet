----------------------------------- 94 -----------------------------------------
public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if(root == null) return ans;

        ans.addAll(inorderTraversal(root.left));
        ans.add(root.val);
        ans.addAll(inorderTraversal(root.right));

        return ans;
    }
----------------------------------- 144 -----------------------------------------
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();

        if(root == null) return ans;

        ans.add(root.val);
        ans.addAll(preorderTraversal(root.left));
        ans.addAll(preorderTraversal(root.right));

        return ans;
    }
----------------------------------- 145 -----------------------------------------
public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if(root == null) return ans;

        ans.addAll(postorderTraversal(root.left));
        ans.addAll(postorderTraversal(root.right));
        ans.add(root.val);

        return ans;
    }
--------------------------------------- 94(morris inorder) ------------------------------
public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();

        TreeNode cur = root;
        
        while(cur != null) {
            if(cur.left == null) {
                ans.add(cur.val);
                cur = cur.right;
            }   else {
                TreeNode prev = cur.left;

                while(prev.right != null && prev.right != cur) {
                    prev = prev.right;
                }

                if(prev.right == null) {
                    // create new connection between prev.rignt and cur
                    prev.right = cur;
                    cur = cur.left;
                }   else {
                    // if connection have so destroy the connection
                    prev.right = null;
                    ans.add(cur.val);
                    cur = cur.right;
                }
            }
        }

        return ans;
    }
-------------------------------------------------- preorderTraversal(code360) ------------------------------------
public static List < Integer > getPreOrderTraversal(TreeNode root) {
    	List<Integer> ans = new ArrayList<>();

        TreeNode cur = root;

        while(cur != null) {
            if(cur.left == null) {
                ans.add(cur.data);
                cur = cur.right;
            }
            else {
                TreeNode prev = cur.left;

                while(prev.right != null && prev.right != cur) {
                    prev = prev.right;
                } 

                if(prev.right == null) {
                    // create connection
                    prev.right = cur;
                    ans.add(cur.data);
                    cur = cur.left;
                }   else {
                    // destroy connection
                    prev.right = null;
                    cur = cur.right;
                }
            }
        }
        return ans;
    }