----------------------------------- 94 -----------------------------------------
public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if(root == null) return ans;

        ans.addAll(inorderTraversal(root.left));
        ans.add(root.val);
        ans.addAll(inorderTraversal(root.right));

        return ans;
    }
----------------------------------- 144 -----------------------------------------
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();

        if(root == null) return ans;

        ans.add(root.val);
        ans.addAll(preorderTraversal(root.left));
        ans.addAll(preorderTraversal(root.right));

        return ans;
    }
----------------------------------- 145 -----------------------------------------
public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if(root == null) return ans;

        ans.addAll(postorderTraversal(root.left));
        ans.addAll(postorderTraversal(root.right));
        ans.add(root.val);

        return ans;
    }
--------------------------------------- 94(morris inorder) ------------------------------
public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();

        TreeNode cur = root;
        
        while(cur != null) {
            if(cur.left == null) {
                ans.add(cur.val);
                cur = cur.right;
            }   else {
                TreeNode prev = cur.left;

                while(prev.right != null && prev.right != cur) {
                    prev = prev.right;
                }

                if(prev.right == null) {
                    // create new connection between prev.rignt and cur
                    prev.right = cur;
                    cur = cur.left;
                }   else {
                    // if connection have so destroy the connection
                    prev.right = null;
                    ans.add(cur.val);
                    cur = cur.right;
                }
            }
        }

        return ans;
    }
-------------------------------------------------- preorderTraversal(code360) ------------------------------------
public static List < Integer > getPreOrderTraversal(TreeNode root) {
    	List<Integer> ans = new ArrayList<>();

        TreeNode cur = root;

        while(cur != null) {
            if(cur.left == null) {
                ans.add(cur.data);
                cur = cur.right;
            }
            else {
                TreeNode prev = cur.left;

                while(prev.right != null && prev.right != cur) {
                    prev = prev.right;
                } 

                if(prev.right == null) {
                    // create connection
                    prev.right = cur;
                    ans.add(cur.data);
                    cur = cur.left;
                }   else {
                    // destroy connection
                    prev.right = null;
                    cur = cur.right;
                }
            }
        }
        return ans;
 -------------------------------------- Left View of Binary Tree --------------------------------------
 ArrayList<Integer> leftView(Node root)
    {
        ArrayList<Integer> list = new ArrayList<>();
        leftViewUtil(root, 0, list);
        return list;
    }
    void leftViewUtil(Node root, int level, ArrayList<Integer> ans) {
        if(root == null) return;
        
        if(level == ans.size()) {
            ans.add(root.data);
        }
        
        leftViewUtil(root.left, level+1, ans);
        leftViewUtil(root.right, level+1, ans);
    }
 -------------------------------------- Bottom View of Binary Tree --------------------------------------
    class Pair {
        Node node;
        int key;
        public Pair(Node node, int key) {
            this.node = node;
            this.key = key;
        }
    }
    public ArrayList <Integer> bottomView(Node root)
    {
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root, 0));
        Map<Integer, Integer> inMap = new TreeMap<>();
        
        while(!q.isEmpty()) {
            Pair p = q.remove();
            
            inMap.put(p.key, p.node.data);
            if(p.node.left != null) {
                q.add(new Pair(p.node.left, p.key -1));
            }
            if(p.node.right != null) {
                q.add(new Pair(p.node.right, p.key + 1));
            }
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        for(Map.Entry<Integer, Integer> entry : inMap.entrySet()) {
            ans.add(entry.getValue());
        }
        
        
        return ans;
    }
